@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Employee Management";
    var antiForgeryToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<h1 class="text-center my-5 text-light">Employee Management using AJAX</h1>

<div class="container">
    <form id="addEmployeeForm" class="p-4 bg-dark text-light rounded shadow-sm">
        <div class="mb-3">
            <input type="text" id="name" placeholder="Name" class="form-control bg-dark text-light" required />
        </div>
        <div class="mb-3">
            <input type="text" id="position" placeholder="Position" class="form-control bg-dark text-light" required />
        </div>
        <div class="mb-3">
            <input type="number" id="age" placeholder="Age" class="form-control bg-dark text-light" required />
        </div>
        <div class="mb-3">
            <input type="text" id="department" placeholder="Department" class="form-control bg-dark text-light" required />
        </div>
        <input type="hidden" id="csrfToken" value="@antiForgeryToken" />
        <button type="submit" class="btn btn-primary w-100">Add Employee</button>
    </form>

    <br />

    <table id="employeeTable" class="table table-striped table-bordered table-dark">
        <thead class="table-light">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Position</th>
                <th>Age</th>
                <th>Department</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<!-- Edit Modal -->
<div id="editModal" class="modal fade" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <input type="text" id="editName" placeholder="Name" class="form-control bg-dark text-light" required />
                </div>
                <div class="mb-3">
                    <input type="text" id="editPosition" placeholder="Position" class="form-control bg-dark text-light" required />
                </div>
                <div class="mb-3">
                    <input type="number" id="editAge" placeholder="Age" class="form-control bg-dark text-light" required />
                </div>
                <div class="mb-3">
                    <input type="text" id="editDepartment" placeholder="Department" class="form-control bg-dark text-light" required />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="saveEdit" class="btn btn-success">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div id="deleteModal" class="modal fade" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Delete Employee</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this employee?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" id="confirmDelete" class="btn btn-danger">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Include Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        const csrfToken = $('#csrfToken').val();
        let currentEmployeeId = null;

        $.ajaxSetup({
            headers: {
                'X-CSRF-TOKEN': csrfToken
            }
        });

        // Fetch all employees
        function fetchEmployees() {
            $.ajax({
                url: '/Employee/GetAll',
                method: 'GET',
                success: function (data) {
                    const tableBody = $('#employeeTable tbody');
                    tableBody.empty();

                    data.forEach(employee => {
                        tableBody.append(`
                                    <tr>
                                        <td>${employee.id}</td>
                                        <td>${employee.name}</td>
                                        <td>${employee.position}</td>
                                        <td>${employee.age}</td>
                                        <td>${employee.department}</td>
                                        <td>
                                            <button class="btn btn-success editBtn" data-id="${employee.id}">Edit</button>
                                            <button class="btn btn-danger deleteBtn" data-id="${employee.id}">Delete</button>
                                        </td>
                                    </tr>
                                `);
                    });
                },
                error: function (xhr, status, error) {
                    alert(`Error: ${xhr.responseText || error}`);
                }
            });
        }

        fetchEmployees();

        $('#addEmployeeForm').submit(function (e) {
            e.preventDefault();
            const newEmployee = {
                name: $('#name').val().trim(),
                position: $('#position').val().trim(),
                age: parseFloat($('#age').val()),
                department: $('#department').val().trim()
            };

            if (!newEmployee.name || !newEmployee.position || !newEmployee.department || isNaN(newEmployee.age) || newEmployee.age <= 0) {
                alert('Please fill all fields correctly.');
                return;
            }

            $.ajax({
                url: '/Employee/Add',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(newEmployee),
                success: function () {
                    $('#addEmployeeForm')[0].reset();
                    fetchEmployees();  // Reload employees list after adding a new one
                },
                error: function (xhr) {
                    alert(`Error: ${xhr.responseText}`);
                }
            });
        });

        $(document).on('click', '.deleteBtn', function () {
            currentEmployeeId = $(this).data('id');
            $('#deleteModal').modal('show');
        });

        $('#confirmDelete').click(function () {
            $.ajax({
                url: `/Employee/Delete/${currentEmployeeId}`,
                method: 'DELETE',
                success: function () {
                    fetchEmployees();
                    $('#deleteModal').modal('hide');
                },
                error: function (xhr) {
                    alert(`Error: ${xhr.responseText}`);
                }
            });
        });

        $(document).on('click', '.editBtn', function () {
            currentEmployeeId = $(this).data('id');
            $.ajax({
                url: `/Employee/GetById/${currentEmployeeId}`,
                method: 'GET',
                success: function (employee) {
                    $('#editName').val(employee.name);
                    $('#editPosition').val(employee.position);
                    $('#editAge').val(employee.age);
                    $('#editDepartment').val(employee.department);
                    $('#editModal').modal('show');
                },
                error: function (xhr) {
                    alert(`Error: ${xhr.responseText}`);
                }
            });
        });

        $('#saveEdit').click(function () {
            const editedEmployee = {
                id: currentEmployeeId,
                name: $('#editName').val().trim(),
                position: $('#editPosition').val().trim(),
                age: parseFloat($('#editAge').val()),
                department: $('#editDepartment').val().trim()
            };

            if (!editedEmployee.name || !editedEmployee.position || !editedEmployee.department || isNaN(editedEmployee.age) || editedEmployee.age <= 0) {
                alert('Please fill all fields correctly.');
                return;
            }

            $.ajax({
                url: '/Employee/Edit',
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(editedEmployee),
                success: function () {
                    fetchEmployees();
                    $('#editModal').modal('hide');
                },
                error: function (xhr) {
                    alert(`Error: ${xhr.responseText}`);
                }
            });
        });
    });
</script>
